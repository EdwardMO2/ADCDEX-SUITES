// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

contract veADC is Initializable, ERC721EnumerableUpgradeable, UUPSUpgradeable, OwnableUpgradeable {
    IERC20Upgradeable public adcToken;
    uint256 public tokenIdCounter;
    uint256 public constant MAX_LOCK_DURATION = 365 days;

    struct LockInfo {
        uint256 amount;
        uint256 unlockTime;
    }

    mapping(uint256 => LockInfo) public locks;

    event Locked(address indexed user, uint256 indexed tokenId, uint256 amount, uint256 unlockTime);
    event Unlocked(address indexed user, uint256 indexed tokenId, uint256 amount);

    function initialize(address _adcToken, address _owner) public initializer {
        __ERC721_init("Vote Escrowed ADC", "veADC");
        __Ownable_init(_owner);
        __UUPSUpgradeable_init();

        adcToken = IERC20Upgradeable(_adcToken);
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}

    function lock(uint256 amount, uint256 duration) external returns (uint256 tokenId) {
        require(amount > 0, "Invalid amount");
        require(duration > 0 && duration <= MAX_LOCK_DURATION, "Invalid lock duration");

        tokenId = ++tokenIdCounter;
        uint256 unlockTime = block.timestamp + duration;

        adcToken.transferFrom(msg.sender, address(this), amount);

        locks[tokenId] = LockInfo(amount, unlockTime);
        _mint(msg.sender, tokenId);

        emit Locked(msg.sender, tokenId, amount, unlockTime);
    }

    function unlock(uint256 tokenId) external {
        require(ownerOf(tokenId) == msg.sender, "Not owner");
        LockInfo memory lockInfo = locks[tokenId];
        require(block.timestamp >= lockInfo.unlockTime, "Lock period not over");

        delete locks[tokenId];
        _burn(tokenId);

        adcToken.transfer(msg.sender, lockInfo.amount);

        emit Unlocked(msg.sender, tokenId, lockInfo.amount);
    }

    function getVotingPower(uint256 tokenId) public view returns (uint256) {
        LockInfo memory lockInfo = locks[tokenId];
        if (block.timestamp >= lockInfo.unlockTime) return 0;

        uint256 remaining = lockInfo.unlockTime - block.timestamp;
        return (lockInfo.amount * remaining) / MAX_LOCK_DURATION;
    }

    function totalVotingPower() external view returns (uint256 power) {
        uint256 supply = totalSupply();
        for (uint256 i = 0; i < supply; i++) {
            power += getVotingPower(tokenByIndex(i));
        }
    }
}
