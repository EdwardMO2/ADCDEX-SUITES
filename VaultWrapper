// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";

contract VaultWrapper is Initializable, UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {
    IERC20Upgradeable public lpToken;
    IERC20Upgradeable public rewardToken; // ADC Token
    address public rewardsSource; // ADCStakingRewards or Treasury

    uint256 public totalShares;
    mapping(address => uint256) public userShares;

    uint256 public accRewardPerShare;
    uint256 public lastUpdateTime;

    event Deposited(address indexed user, uint256 lpAmount, uint256 sharesMinted);
    event Withdrawn(address indexed user, uint256 lpAmount, uint256 sharesBurned);
    event RewardHarvested(uint256 amount, uint256 timestamp);

    function initialize(
        address _lpToken,
        address _rewardToken,
        address _rewardsSource,
        address _owner
    ) public initializer {
        __Ownable_init(_owner);
        __UUPSUpgradeable_init();
        __ReentrancyGuard_init();

        lpToken = IERC20Upgradeable(_lpToken);
        rewardToken = IERC20Upgradeable(_rewardToken);
        rewardsSource = _rewardsSource;

        lastUpdateTime = block.timestamp;
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}

    function deposit(uint256 amount) external nonReentrant {
        require(amount > 0, "Invalid deposit amount");

        _updateRewards();

        uint256 shares = totalShares == 0 ? amount : (amount * totalShares) / lpToken.balanceOf(address(this));
        require(shares > 0, "Insufficient shares minted");

        lpToken.transferFrom(msg.sender, address(this), amount);

        userShares[msg.sender] += shares;
        totalShares += shares;

        emit Deposited(msg.sender, amount, shares);
    }

    function withdraw(uint256 shares) external nonReentrant {
        require(shares > 0 && userShares[msg.sender] >= shares, "Invalid withdraw amount");

        _updateRewards();

        uint256 lpAmount = (shares * lpToken.balanceOf(address(this))) / totalShares;

        userShares[msg.sender] -= shares;
        totalShares -= shares;

        lpToken.transfer(msg.sender, lpAmount);

        emit Withdrawn(msg.sender, lpAmount, shares);
    }

    function harvest() public nonReentrant {
        _updateRewards();
    }

    function _updateRewards() internal {
        uint256 newRewards = rewardToken.balanceOf(rewardsSource);

        if (newRewards > 0) {
            require(rewardToken.transferFrom(rewardsSource, address(this), newRewards), "Reward transfer failed");

            accRewardPerShare += (newRewards * 1e18) / totalShares;
            emit RewardHarvested(newRewards, block.timestamp);
        }

        lastUpdateTime = block.timestamp;
    }

    function pendingRewards(address user) external view returns (uint256) {
        uint256 newRewards = rewardToken.balanceOf(rewardsSource);

        uint256 updatedAccRewardPerShare = accRewardPerShare;
        if (newRewards > 0 && totalShares > 0) {
            updatedAccRewardPerShare += (newRewards * 1e18) / totalShares;
        }

        uint256 userShare = userShares[user];
        return (userShare * updatedAccRewardPerShare) / 1e18;
    }

    function claimRewards() external nonReentrant {
        _updateRewards();

        uint256 userShare = userShares[msg.sender];
        uint256 pending = (userShare * accRewardPerShare) / 1e18;

        require(pending > 0, "No rewards to claim");

        rewardToken.transfer(msg.sender, pending);
    }
}
